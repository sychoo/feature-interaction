
# Simon Chu
# Mon Jan 18 12:37:41 EST 2021
# TODO: refactor the code below

from typing import Optional
from src.obj.map import Coord


class Drone:
    """store properties for drones
    Usage:
        >>> from src.obj.drone import Drone
        >>> from src.obj.map import Coord
        >>> d = Drone("ego")
        >>> d.loc = Coord(1, 0)
        >>> Coord(0, 0) in d.loc.neighbor
        True
        >>> Coord(5, 5) in d.loc.neighbor
        False
        >>> d.loc = Coord(5, 0)
        RuntimeError("cannot assign drone to coordinates other than the current neighbors")
    """
    def __init__(self, id_val: str):
        self.id_val = id_val
        self.loc_val: Optional[Coord] = None

    #######################
    # getters and setters #
    #######################

    @property
    def id(self):
        return self.id_val

    @id.setter
    def id(self, id_val: str):
        self.id_val = id_val

    @property
    def loc(self):
        return self.loc_val

    @loc.setter
    def loc(self, coord: Coord):
        if self.loc_val is None:
            self.loc_val = coord
        elif coord in self.loc_val.neighbor:
            self.loc_val = coord
        else:
            raise RuntimeError("cannot assign drone to coordinates other than the current neighbors")



# class Drone(metaclass=abc.ABCMeta):
#     """super class, support different types of drones
#
#     Attributes:
#         response_data: data generated by this drone and other drones
#     """
#
#     @abc.abstractmethod
#     def next_step(self):
#         """abstract class, determine and change the next location for the drone
#         based on the previous move or algorithm
#
#
#         Extended description of function.
#
#         Args:
#             arg1 (int): Description of arg1
#             arg2 (str): Description of arg2
#
#         Returns:
#             bool: Description of return value
#
#         """
#         # abstract method to execute everytime the drone advances in the execution loop
#         pass
#
#     @abc.abstractmethod
#     def emit_response_data(self):
#
#         # output the response data from the drone
#         # abstact method to execute everytime an execution cycle just finished
#         pass
#
#     def receive_shared_flight_data(self, shared_flight_data):
#         self.shared_flight_data = shared_flight_data
#
#     # deprecated
#     def receive_response_data(self, response_data):
#         # receive response data from the broadcaster in the execution loop
#         self.response_data = response_data
#
#     # deprecated
#     def has_response_data(self):
#         # check whether response data is initialized
#         return hasattr(self, "response_data")
#
#     def has_shared_flight_data(self):
#         # check whether response data is initialized
#         return hasattr(self, "shared_flight_data")
#
#     # deprecated
#     def get_response_data(self):
#         # fetch the response data received from the broadcaster in the run method in the MissionPlanner
#         if hasattr(self, "response_data"):
#             return self.response_data
#         else:
#             raise RuntimeError(
#                 "response_data variable has not been initialized.")
#
#     def get_shared_flight_data(self):
#         # fetch the response data received from the broadcaster in the run method in the MissionPlanner
#         if hasattr(self, "shared_flight_data"):
#             return self.shared_flight_data
#         else:
#             raise RuntimeError(
#                 "shared_flight_data variable has not been initialized.")
#
#     def init_attribute(self):
#         # initialize the attribute
#         # can hold various things like flight path list of tuple of coordinates,
#         self.attributes = dict()
#
#     def set_identifier(self, identifier):
#         # set identifier for the drone
#         self.identifier = identifier
#
#     def get_identifier(self):
#         # get the identifier for the drone
#         if hasattr(self, "identifier"):
#             return self.identifier
#         else:
#             raise RuntimeError(
#                 "drone identifier variable has not been initialized.")
#
#     # duplicate for self.get_identifier
#     def get_id(self):
#         # get the identifier for the drone
#         if hasattr(self, "identifier"):
#             return self.identifier
#         else:
#             raise RuntimeError(
#                 "drone identifier variable has not been initialized.")
#
#     def set_internal_map(self, internal_map):
#         # set the internal map associated with the drone
#         self.internal_map = internal_map
#
#     def get_internal_map(self):
#         if hasattr(self, "internal_map"):
#             return self.internal_map
#         else:
#             raise RuntimeError("map variable has not been initialized.")
#
#     # def set_initial_location(self, init_x_cor, init_y_cor):
#     def set_init_coord(self, coord):
#         """Summary line.
#
#         Extended description of function.
#
#         Args:
#             arg1 (int): Description of arg1
#             arg2 (str): Description of arg2
#
#         Returns:
#             bool: Description of return value
#
#         """
#         # set the initial position coordinates for the drone
#         self.init_coord = coord
#         self.current_coord = coord
#
#         # self.init_x_cor = init_x_cor
#         # self.init_y_cor = init_y_cor
#
#         # when setting the initial value, the current location will be automatically set to the intial values
#         # self.set_current_location(init_x_cor, init_y_cor)
#
#     # def get_init_x_cor(self):
#     #     # get the initial X coordinate
#     #     return self.init_x_cor
#
#     # def get_init_y_cor(self):
#     #     # get the initial Y coordinate
#     #     return self.init_y_cor
#
#     def get_init_coord(self):
#         return self.init_coord
#
#     def set_current_coord(self, coord):
#         # set the current location for the drone
#         self.current_coord = coord
#
#     def get_current_coord(self):
#         # obtain the current drone location
#         # return (self.x_cor, self.y_cor)
#         return self.current_coord
#
#     def get_current_location_map_cell(self):
#         # get the map_cell object of the current location
#         # first ensure that the map variable is set
#         if hasattr(self, "internal_map"):
#             return self.internal_map.get_map_cell(self.get_current_coord())
#         else:
#             raise RuntimeError("map variable has not been initialized.")
#
#     # def get_x_cor(self):
#     #     return self.x_cor
#
#     # def get_y_cor(self):
#     #     return self.y_cor
#
#     def __str__(self):
#         return self.get_identifier() + " Drone: " + str(self.get_current_coord())
#
#     def __repr__(self):
#         return self.get_identifier() + " Drone: (" + str(self.get_current_coord())
#
# # EnemyDrone class inherits the Drone parent class
#
